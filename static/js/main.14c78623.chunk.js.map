{"version":3,"sources":["Services/Store.js","Components/Navbar/navbar.js","Components/Jumbotron/jumbotron.js","Pages/home.js","Pages/help.js","Pages/shop.js","Pages/about.js","App.js","serviceWorker.js","index.js","Logo.png"],"names":["initialState","authed","Provider","createContext","StateProvider","children","useReducer","state","action","type","Error","dispatch","value","Navbar","className","to","style","textDecoration","color","src","Logo","alt","width","height","Jumbotron","title","Home","Help","Shop","About","App","props","useState","handleInfo","basename","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"kOAEMA,EAAe,CAAEC,QAAQ,GAEvBC,EADMC,wBAAcH,GACpBE,SAEFE,EAAgB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACZC,sBAAW,SAACC,EAAOC,GAGvC,MAFIA,EAAOC,KAEL,IAAIC,QAEbV,GANmC,mBAC/BO,EAD+B,KACxBI,EADwB,KAQtC,OAAO,kBAACT,EAAD,CAAUU,MAAO,CAAEL,QAAOI,aAAaN,I,uDCejCQ,EA1BA,WACb,OACE,yBAAKC,UAAU,UACb,yBAAKA,UAAU,QACb,kBAAC,IAAD,CAAMC,GAAG,IAAIC,MAAO,CAAEC,eAAgB,OAAQC,MAAO,UACnD,yBAAKC,IAAKC,IAAMC,IAAI,OAAOC,MAAM,OAAOC,OAAO,WAGnD,yBAAKT,UAAU,gBACb,kBAAC,IAAD,CAAMC,GAAG,IAAIC,MAAO,CAAEC,eAAgB,OAAQC,MAAO,UACnD,sCAEF,kBAAC,IAAD,CAAMH,GAAG,QAAQC,MAAO,CAAEC,eAAgB,OAAQC,MAAO,UACvD,sCAEF,kBAAC,IAAD,CAAMH,GAAG,SAASC,MAAO,CAAEC,eAAgB,OAAQC,MAAO,UACxD,uCAEF,kBAAC,IAAD,CAAMH,GAAG,QAAQC,MAAO,CAAEC,eAAgB,OAAQC,MAAO,UACvD,yCCVKM,EATG,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACnB,OACE,yBAAKX,UAAU,aACb,yBAAKK,IAAKC,IAAMC,IAAI,OAAOC,MAAM,QAAQC,OAAO,UAChD,4BAAKE,KCGIC,EARF,WACX,OACE,yBAAKZ,UAAU,QACb,kBAAC,EAAD,CAAWW,MAAM,sBCCRE,EAJF,WACX,OAAO,yBAAKb,UAAU,UCGTc,EAJF,WACX,OAAO,yBAAKd,UAAU,UCGTe,EAJD,WACZ,OAAO,yBAAKf,UAAU,WCuBTgB,G,MAjBH,SAACC,GAAW,IAAD,EACiBC,oBAAS,GAD1B,6BAGED,EAAfE,WACR,OACE,yBAAKnB,UAAU,OACb,kBAAC,IAAD,CAAYoB,SAAS,KACnB,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWX,IACjC,kBAAC,IAAD,CAAOU,KAAK,QAAQC,UAAWV,IAC/B,kBAAC,IAAD,CAAOS,KAAK,SAASC,UAAWR,IAChC,kBAAC,IAAD,CAAOO,KAAK,QAAQC,UAAWT,QCRjCU,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB9C,QACfwC,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MCzFjEC,IAASC,OACP,kBAAC,EAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDWnB,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,kBAAwB5B,OAAOC,SAAS4B,MACpDC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMuB,kBAAN,sBAEP9B,IAgEV,SAAiCO,EAAOC,GAEtC0B,MAAM3B,EAAO,CACX4B,QAAS,CAAE,iBAAkB,YAE5BvB,MAAK,SAAAwB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM7B,MAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,MAAK,WAC7BV,OAAOC,SAASwC,eAKpBrC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEAvFAwB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,MAAK,WACjCO,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OCjC/BE,I,kBCjBAmC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.14c78623.chunk.js","sourcesContent":["import React, { createContext, useReducer } from \"react\";\r\n// voor nu even true!!\r\nconst initialState = { authed: true };\r\nconst store = createContext(initialState);\r\nconst { Provider } = store;\r\n\r\nconst StateProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer((state, action) => {\r\n    switch (action.type) {\r\n      default:\r\n        throw new Error();\r\n    }\r\n  }, initialState);\r\n\r\n  return <Provider value={{ state, dispatch }}>{children}</Provider>;\r\n};\r\n\r\nexport { store, StateProvider };\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Logo from \"../../Logo.png\";\r\nconst Navbar = () => {\r\n  return (\r\n    <div className=\"navbar\">\r\n      <div className=\"logo\">\r\n        <Link to=\"/\" style={{ textDecoration: \"none\", color: \"black\" }}>\r\n          <img src={Logo} alt=\"logo\" width=\"75px\" height=\"75px\" />\r\n        </Link>\r\n      </div>\r\n      <div className=\"navbar-items\">\r\n        <Link to=\"/\" style={{ textDecoration: \"none\", color: \"black\" }}>\r\n          <p> Home </p>\r\n        </Link>\r\n        <Link to=\"/shop\" style={{ textDecoration: \"none\", color: \"black\" }}>\r\n          <p> Shop </p>\r\n        </Link>\r\n        <Link to=\"/about\" style={{ textDecoration: \"none\", color: \"black\" }}>\r\n          <p> About </p>\r\n        </Link>\r\n        <Link to=\"/help\" style={{ textDecoration: \"none\", color: \"black\" }}>\r\n          <p> Help </p>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport Logo from \"../../Logo.png\";\r\n\r\nconst Jumbotron = ({ title }) => {\r\n  return (\r\n    <div className=\"jumbotron\">\r\n      <img src={Logo} alt=\"logo\" width=\"100px\" height=\"100px\" />\r\n      <h1>{title}</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Jumbotron;\r\n","import React from \"react\";\r\nimport Jumbotron from \"../Components/Jumbotron/jumbotron\";\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"home\">\r\n      <Jumbotron title=\"Kastjes Fabriek\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\n\r\nconst Help = () => {\r\n  return <div className=\"help\"></div>;\r\n};\r\n\r\nexport default Help;\r\n","import React from \"react\";\r\n\r\nconst Shop = () => {\r\n  return <div className=\"shop\"></div>;\r\n};\r\n\r\nexport default Shop;\r\n","import React from \"react\";\r\n\r\nconst About = () => {\r\n  return <div className=\"about\"></div>;\r\n};\r\n\r\nexport default About;\r\n","import React, { useState } from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport Navbar from \"./Components/Navbar/navbar\";\nimport Home from \"./Pages/home\";\nimport Help from \"./Pages/help\";\nimport Shop from \"./Pages/shop\";\nimport About from \"./Pages/about\";\nimport \"./Styles/import.scss\";\n\nconst App = (props) => {\n  const [showElement, setShowElement] = useState(false);\n\n  const { handleInfo } = props;\n  return (\n    <div className=\"App\">\n      <HashRouter basename=\"/\">\n        <Navbar />\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/help\" component={Help} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/shop\" component={Shop} />\n      </HashRouter>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport { StateProvider } from \"./Services/Store\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <StateProvider>\n    <App />\n  </StateProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/Logo.e44725f8.png\";"],"sourceRoot":""}